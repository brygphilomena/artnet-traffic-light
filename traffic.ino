/* 
  Sketch generated by the Arduino IoT Cloud Thing "Traffic"
  https://create.arduino.cc/cloud/things/02930881-ea82-47a3-8c62-422ae7ab3451 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int blinkAmount;
  int dmxUniverse;
  int greenChannel;
  int greenDelay;
  int lightdelay;
  int mode;
  int redChannel;
  int redDelay;
  int sequence;
  bool greenOn;
  bool redOn;
  bool runauto;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include <ArtnetWiFi.h>
#include "thingProperties.h"

int i;
const int RED_RELAY_PIN = 4;  // the Arduino pin, which connects to the IN pin of relay
const int GREEN_RELAY_PIN = 3;  // the Arduino pin, which connects to the IN pin of relay
unsigned long previousMillis = 0;
ArtnetWiFiReceiver artnet;
uint8_t universe1 = dmxUniverse;  // 0 - 15

void setup() {

  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();
  pinMode(RED_RELAY_PIN, OUTPUT);
  pinMode(GREEN_RELAY_PIN, OUTPUT);
  Serial.println((String)"================");
  Serial.println(millis()+(String)" Booting up");
  Serial.println((String)"================");
  mode = 1;
  artnet.begin(); // waiting for Art-Net in default port
  artnet.subscribe(universe1, [&](const uint8_t* data, const uint16_t size) {
    runauto = 0;
    Serial.print("lambda : artnet data (universe : ");
    Serial.print(universe1);
    Serial.print(", size = ");
    Serial.print(size);
    Serial.print(") :");
    for (size_t i = 0; i < size; ++i) {
      Serial.print(data[i]);
      Serial.print(",");
      artnetOnOff(i + 1, data[i]);
    }
    Serial.println();
  });
  if (redDelay == NULL) {
    redDelay = lightdelay;
  };
  if (greenDelay == NULL) {
    greenDelay = lightdelay;
  };
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  artnet.parse();
  if (runauto) {
    Serial.println(millis()+(String)" Running auto run");
    if (mode == 1) {
//  	  if (millis() - previousMillis >= lightdelay * 1000) {
  	    // Turn red light on and green light off
  	    Serial.println(millis()+(String)" Running mode"+mode+(String)" Red On, Green Off");
        digitalWrite(RED_RELAY_PIN, LOW);
        digitalWrite(GREEN_RELAY_PIN, HIGH);
        previousMillis = millis();
        mode = 2;
//      }
  	}
  	else if (mode == 2) {
  	  if (millis() - previousMillis >= redDelay * 1000) {
    	  // Turn red light off and green light on
    	  Serial.println(millis()+(String)" Running mode"+mode+(String)" Red Off, Green On");
        digitalWrite(RED_RELAY_PIN, HIGH);
        digitalWrite(GREEN_RELAY_PIN, LOW);
        previousMillis = millis();
      	mode = 3;
  	  }
  	}
  	else if (mode == 3) {
  	  if (millis() - previousMillis >= greenDelay * 1000) {
      	Serial.println(millis()+(String)" Running mode"+mode+(String)" Blink Red");
      	digitalWrite(GREEN_RELAY_PIN, HIGH);
  	    i = 0;
        while (i < blinkAmount) { // Must be an even number for the iterations
          i++;
          Serial.println(millis()+(String)" Iteration "+i);
          digitalWrite(RED_RELAY_PIN, LOW);
          delay(500);
          yield();
          digitalWrite(RED_RELAY_PIN, HIGH);
          delay(500);
          yield();
        }
  	  mode = 1;
  	  previousMillis = millis();
  	  }
  	}
	  else {
	    mode = 1;
	  }
  Serial.println(millis()+(String)" End of runauto");
  }
}


/*
  Since Runauto is READ_WRITE variable, onRunautoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRunautoChange()  {
  // Add your code here to act upon Runauto change
  Serial.println((String)"Runauto set to "+runauto);
  if (runauto) {
    mode = 1;
  }
  if (!runauto) {
    digitalWrite(RED_RELAY_PIN, HIGH);
    digitalWrite(GREEN_RELAY_PIN, HIGH);
  }
}

void artnetOnOff(int channel, int value) {
  // Figure out how to use channelStart to set what channels to actually
  // give a shit about. Maybe just use specific channels.
  if (channel == redChannel) {
    if (value >= 128) {
      digitalWrite(RED_RELAY_PIN, LOW);
    }
    else if (value <= 127) {
      digitalWrite(RED_RELAY_PIN, HIGH);
      redOn = 0;
    }
  }
  if (channel == greenChannel) {
    if (value >= 128) {
      digitalWrite(GREEN_RELAY_PIN, LOW);
    }
    else if (value <= 127) {
      digitalWrite(GREEN_RELAY_PIN, HIGH);
      greenOn = 0;
    }
  }
}

/*
  Since Lightdelay is READ_WRITE variable, onLightdelayChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLightdelayChange()  {
  // Add your code here to act upon Lightdelay change
}


/*
  Since RedOn is READ_WRITE variable, onRedOnChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRedOnChange()  {
  // Add your code here to act upon RedOn change
  if (redOn) {
    digitalWrite(RED_RELAY_PIN, LOW);
  }
  if (!redOn) {
    digitalWrite(RED_RELAY_PIN, HIGH);
  }
}

/*
  Since GreenOn is READ_WRITE variable, onGreenOnChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onGreenOnChange()  {
  // Add your code here to act upon GreenOn change
  if (greenOn) {
    digitalWrite(GREEN_RELAY_PIN, LOW);
  }
  if (!greenOn) {
    digitalWrite(GREEN_RELAY_PIN, HIGH);
  }

}

/*
  Since BlinkAmount is READ_WRITE variable, onBlinkAmountChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBlinkAmountChange()  {
  // Add your code here to act upon BlinkAmount change
}

/*
  Since GreenDelay is READ_WRITE variable, onGreenDelayChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onGreenDelayChange()  {
  // Add your code here to act upon GreenDelay change
}

/*
  Since RedDelay is READ_WRITE variable, onRedDelayChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRedDelayChange()  {
  // Add your code here to act upon RedDelay change
}

/*
  Since Sequence is READ_WRITE variable, onSequenceChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSequenceChange()  {
  // Add your code here to act upon Sequence change
}

/*
  Since RedChannel is READ_WRITE variable, onRedChannelChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRedChannelChange()  {
  // Add your code here to act upon RedChannel change
}

/*
  Since GreenChannel is READ_WRITE variable, onGreenChannelChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onGreenChannelChange()  {
  // Add your code here to act upon GreenChannel change
}

/*
  Since DmxUniverse is READ_WRITE variable, onDmxUniverseChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDmxUniverseChange()  {
  // Add your code here to act upon DmxUniverse change
}
